// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "PointAnnotationMessager.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

/// Part of the icon placed closest to the anchor.
@implementation FLTIconAnchorBox
- (instancetype)initWithValue:(FLTIconAnchor)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Orientation of icon when map is pitched.
@implementation FLTIconPitchAlignmentBox
- (instancetype)initWithValue:(FLTIconPitchAlignment)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// In combination with `symbol-placement`, determines the rotation behavior of icons.
@implementation FLTIconRotationAlignmentBox
- (instancetype)initWithValue:(FLTIconRotationAlignment)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Scales the icon to fit around the associated text.
@implementation FLTIconTextFitBox
- (instancetype)initWithValue:(FLTIconTextFit)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Label placement relative to its geometry.
@implementation FLTSymbolPlacementBox
- (instancetype)initWithValue:(FLTSymbolPlacement)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Determines whether overlapping symbols in the same layer are rendered in the order that they appear in the data source or by their y-position relative to the viewport. To control the order and prioritization of symbols otherwise, use `symbol-sort-key`.
@implementation FLTSymbolZOrderBox
- (instancetype)initWithValue:(FLTSymbolZOrder)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Part of the text placed closest to the anchor.
@implementation FLTTextAnchorBox
- (instancetype)initWithValue:(FLTTextAnchor)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Text justification options.
@implementation FLTTextJustifyBox
- (instancetype)initWithValue:(FLTTextJustify)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Orientation of text when map is pitched.
@implementation FLTTextPitchAlignmentBox
- (instancetype)initWithValue:(FLTTextPitchAlignment)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// In combination with `symbol-placement`, determines the rotation behavior of the individual glyphs forming the text.
@implementation FLTTextRotationAlignmentBox
- (instancetype)initWithValue:(FLTTextRotationAlignment)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Specifies how to capitalize text, similar to the CSS `text-transform` property.
@implementation FLTTextTransformBox
- (instancetype)initWithValue:(FLTTextTransform)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// To increase the chance of placing high-priority labels on the map, you can provide an array of `text-anchor` locations: the renderer will attempt to place the label at each location, in order, before moving onto the next label. Use `text-justify: auto` to choose justification based on anchor position. To apply an offset, use the `text-radial-offset` or the two-dimensional `text-offset`.
@implementation FLTTextVariableAnchorBox
- (instancetype)initWithValue:(FLTTextVariableAnchor)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// The property allows control over a symbol's orientation. Note that the property values act as a hint, so that a symbol whose language doesnâ€™t support the provided orientation will be laid out in its natural orientation. Example: English point symbol will be rendered horizontally even if array value contains single 'vertical' enum value. The order of elements in an array define priority order for the placement of an orientation variant.
@implementation FLTTextWritingModeBox
- (instancetype)initWithValue:(FLTTextWritingMode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Controls the frame of reference for `icon-translate`.
@implementation FLTIconTranslateAnchorBox
- (instancetype)initWithValue:(FLTIconTranslateAnchor)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

/// Controls the frame of reference for `text-translate`.
@implementation FLTTextTranslateAnchorBox
- (instancetype)initWithValue:(FLTTextTranslateAnchor)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTPointAnnotation ()
+ (FLTPointAnnotation *)fromList:(NSArray *)list;
+ (nullable FLTPointAnnotation *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FLTPointAnnotationOptions ()
+ (FLTPointAnnotationOptions *)fromList:(NSArray *)list;
+ (nullable FLTPointAnnotationOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTPointAnnotation
+ (instancetype)makeWithId:(NSString *)id
    geometry:(nullable NSDictionary<NSString *, id> *)geometry
    image:(nullable FlutterStandardTypedData *)image
    iconAnchor:(nullable FLTIconAnchorBox *)iconAnchor
    iconImage:(nullable NSString *)iconImage
    iconOffset:(nullable NSArray<NSNumber *> *)iconOffset
    iconRotate:(nullable NSNumber *)iconRotate
    iconSize:(nullable NSNumber *)iconSize
    symbolSortKey:(nullable NSNumber *)symbolSortKey
    textAnchor:(nullable FLTTextAnchorBox *)textAnchor
    textField:(nullable NSString *)textField
    textJustify:(nullable FLTTextJustifyBox *)textJustify
    textLetterSpacing:(nullable NSNumber *)textLetterSpacing
    textMaxWidth:(nullable NSNumber *)textMaxWidth
    textOffset:(nullable NSArray<NSNumber *> *)textOffset
    textRadialOffset:(nullable NSNumber *)textRadialOffset
    textRotate:(nullable NSNumber *)textRotate
    textSize:(nullable NSNumber *)textSize
    textTransform:(nullable FLTTextTransformBox *)textTransform
    iconColor:(nullable NSNumber *)iconColor
    iconHaloBlur:(nullable NSNumber *)iconHaloBlur
    iconHaloColor:(nullable NSNumber *)iconHaloColor
    iconHaloWidth:(nullable NSNumber *)iconHaloWidth
    iconOpacity:(nullable NSNumber *)iconOpacity
    textColor:(nullable NSNumber *)textColor
    textHaloBlur:(nullable NSNumber *)textHaloBlur
    textHaloColor:(nullable NSNumber *)textHaloColor
    textHaloWidth:(nullable NSNumber *)textHaloWidth
    textOpacity:(nullable NSNumber *)textOpacity
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTPointAnnotation* pigeonResult = [[FLTPointAnnotation alloc] init];
  pigeonResult.id = id;
  pigeonResult.geometry = geometry;
  pigeonResult.image = image;
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = iconImage;
  pigeonResult.iconOffset = iconOffset;
  pigeonResult.iconRotate = iconRotate;
  pigeonResult.iconSize = iconSize;
  pigeonResult.symbolSortKey = symbolSortKey;
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = textField;
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = textLetterSpacing;
  pigeonResult.textMaxWidth = textMaxWidth;
  pigeonResult.textOffset = textOffset;
  pigeonResult.textRadialOffset = textRadialOffset;
  pigeonResult.textRotate = textRotate;
  pigeonResult.textSize = textSize;
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = iconColor;
  pigeonResult.iconHaloBlur = iconHaloBlur;
  pigeonResult.iconHaloColor = iconHaloColor;
  pigeonResult.iconHaloWidth = iconHaloWidth;
  pigeonResult.iconOpacity = iconOpacity;
  pigeonResult.textColor = textColor;
  pigeonResult.textHaloBlur = textHaloBlur;
  pigeonResult.textHaloColor = textHaloColor;
  pigeonResult.textHaloWidth = textHaloWidth;
  pigeonResult.textOpacity = textOpacity;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTPointAnnotation *)fromList:(NSArray *)list {
  FLTPointAnnotation *pigeonResult = [[FLTPointAnnotation alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.geometry = GetNullableObjectAtIndex(list, 1);
  pigeonResult.image = GetNullableObjectAtIndex(list, 2);
  NSNumber *iconAnchorAsNumber = GetNullableObjectAtIndex(list, 3);
  FLTIconAnchorBox *iconAnchor = iconAnchorAsNumber == nil ? nil : [[FLTIconAnchorBox alloc] initWithValue: [iconAnchorAsNumber integerValue]];
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = GetNullableObjectAtIndex(list, 4);
  pigeonResult.iconOffset = GetNullableObjectAtIndex(list, 5);
  pigeonResult.iconRotate = GetNullableObjectAtIndex(list, 6);
  pigeonResult.iconSize = GetNullableObjectAtIndex(list, 7);
  pigeonResult.symbolSortKey = GetNullableObjectAtIndex(list, 8);
  NSNumber *textAnchorAsNumber = GetNullableObjectAtIndex(list, 9);
  FLTTextAnchorBox *textAnchor = textAnchorAsNumber == nil ? nil : [[FLTTextAnchorBox alloc] initWithValue: [textAnchorAsNumber integerValue]];
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = GetNullableObjectAtIndex(list, 10);
  NSNumber *textJustifyAsNumber = GetNullableObjectAtIndex(list, 11);
  FLTTextJustifyBox *textJustify = textJustifyAsNumber == nil ? nil : [[FLTTextJustifyBox alloc] initWithValue: [textJustifyAsNumber integerValue]];
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = GetNullableObjectAtIndex(list, 12);
  pigeonResult.textMaxWidth = GetNullableObjectAtIndex(list, 13);
  pigeonResult.textOffset = GetNullableObjectAtIndex(list, 14);
  pigeonResult.textRadialOffset = GetNullableObjectAtIndex(list, 15);
  pigeonResult.textRotate = GetNullableObjectAtIndex(list, 16);
  pigeonResult.textSize = GetNullableObjectAtIndex(list, 17);
  NSNumber *textTransformAsNumber = GetNullableObjectAtIndex(list, 18);
  FLTTextTransformBox *textTransform = textTransformAsNumber == nil ? nil : [[FLTTextTransformBox alloc] initWithValue: [textTransformAsNumber integerValue]];
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = GetNullableObjectAtIndex(list, 19);
  pigeonResult.iconHaloBlur = GetNullableObjectAtIndex(list, 20);
  pigeonResult.iconHaloColor = GetNullableObjectAtIndex(list, 21);
  pigeonResult.iconHaloWidth = GetNullableObjectAtIndex(list, 22);
  pigeonResult.iconOpacity = GetNullableObjectAtIndex(list, 23);
  pigeonResult.textColor = GetNullableObjectAtIndex(list, 24);
  pigeonResult.textHaloBlur = GetNullableObjectAtIndex(list, 25);
  pigeonResult.textHaloColor = GetNullableObjectAtIndex(list, 26);
  pigeonResult.textHaloWidth = GetNullableObjectAtIndex(list, 27);
  pigeonResult.textOpacity = GetNullableObjectAtIndex(list, 28);
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 29);
  return pigeonResult;
}
+ (nullable FLTPointAnnotation *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPointAnnotation fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.geometry ?: [NSNull null]),
    (self.image ?: [NSNull null]),
    (self.iconAnchor == nil ? [NSNull null] : [NSNumber numberWithInteger:self.iconAnchor.value]),
    (self.iconImage ?: [NSNull null]),
    (self.iconOffset ?: [NSNull null]),
    (self.iconRotate ?: [NSNull null]),
    (self.iconSize ?: [NSNull null]),
    (self.symbolSortKey ?: [NSNull null]),
    (self.textAnchor == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textAnchor.value]),
    (self.textField ?: [NSNull null]),
    (self.textJustify == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textJustify.value]),
    (self.textLetterSpacing ?: [NSNull null]),
    (self.textMaxWidth ?: [NSNull null]),
    (self.textOffset ?: [NSNull null]),
    (self.textRadialOffset ?: [NSNull null]),
    (self.textRotate ?: [NSNull null]),
    (self.textSize ?: [NSNull null]),
    (self.textTransform == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textTransform.value]),
    (self.iconColor ?: [NSNull null]),
    (self.iconHaloBlur ?: [NSNull null]),
    (self.iconHaloColor ?: [NSNull null]),
    (self.iconHaloWidth ?: [NSNull null]),
    (self.iconOpacity ?: [NSNull null]),
    (self.textColor ?: [NSNull null]),
    (self.textHaloBlur ?: [NSNull null]),
    (self.textHaloColor ?: [NSNull null]),
    (self.textHaloWidth ?: [NSNull null]),
    (self.textOpacity ?: [NSNull null]),
    (self.userInfo ?: [NSNull null]),
  ];
}
@end

@implementation FLTPointAnnotationOptions
+ (instancetype)makeWithGeometry:(nullable NSDictionary<NSString *, id> *)geometry
    image:(nullable FlutterStandardTypedData *)image
    iconAnchor:(nullable FLTIconAnchorBox *)iconAnchor
    iconImage:(nullable NSString *)iconImage
    iconOffset:(nullable NSArray<NSNumber *> *)iconOffset
    iconRotate:(nullable NSNumber *)iconRotate
    iconSize:(nullable NSNumber *)iconSize
    symbolSortKey:(nullable NSNumber *)symbolSortKey
    textAnchor:(nullable FLTTextAnchorBox *)textAnchor
    textField:(nullable NSString *)textField
    textJustify:(nullable FLTTextJustifyBox *)textJustify
    textLetterSpacing:(nullable NSNumber *)textLetterSpacing
    textMaxWidth:(nullable NSNumber *)textMaxWidth
    textOffset:(nullable NSArray<NSNumber *> *)textOffset
    textRadialOffset:(nullable NSNumber *)textRadialOffset
    textRotate:(nullable NSNumber *)textRotate
    textSize:(nullable NSNumber *)textSize
    textTransform:(nullable FLTTextTransformBox *)textTransform
    iconColor:(nullable NSNumber *)iconColor
    iconHaloBlur:(nullable NSNumber *)iconHaloBlur
    iconHaloColor:(nullable NSNumber *)iconHaloColor
    iconHaloWidth:(nullable NSNumber *)iconHaloWidth
    iconOpacity:(nullable NSNumber *)iconOpacity
    textColor:(nullable NSNumber *)textColor
    textHaloBlur:(nullable NSNumber *)textHaloBlur
    textHaloColor:(nullable NSNumber *)textHaloColor
    textHaloWidth:(nullable NSNumber *)textHaloWidth
    textOpacity:(nullable NSNumber *)textOpacity
    userInfo:(nullable NSDictionary<NSString *, id> *)userInfo {
  FLTPointAnnotationOptions* pigeonResult = [[FLTPointAnnotationOptions alloc] init];
  pigeonResult.geometry = geometry;
  pigeonResult.image = image;
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = iconImage;
  pigeonResult.iconOffset = iconOffset;
  pigeonResult.iconRotate = iconRotate;
  pigeonResult.iconSize = iconSize;
  pigeonResult.symbolSortKey = symbolSortKey;
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = textField;
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = textLetterSpacing;
  pigeonResult.textMaxWidth = textMaxWidth;
  pigeonResult.textOffset = textOffset;
  pigeonResult.textRadialOffset = textRadialOffset;
  pigeonResult.textRotate = textRotate;
  pigeonResult.textSize = textSize;
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = iconColor;
  pigeonResult.iconHaloBlur = iconHaloBlur;
  pigeonResult.iconHaloColor = iconHaloColor;
  pigeonResult.iconHaloWidth = iconHaloWidth;
  pigeonResult.iconOpacity = iconOpacity;
  pigeonResult.textColor = textColor;
  pigeonResult.textHaloBlur = textHaloBlur;
  pigeonResult.textHaloColor = textHaloColor;
  pigeonResult.textHaloWidth = textHaloWidth;
  pigeonResult.textOpacity = textOpacity;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (FLTPointAnnotationOptions *)fromList:(NSArray *)list {
  FLTPointAnnotationOptions *pigeonResult = [[FLTPointAnnotationOptions alloc] init];
  pigeonResult.geometry = GetNullableObjectAtIndex(list, 0);
  pigeonResult.image = GetNullableObjectAtIndex(list, 1);
  NSNumber *iconAnchorAsNumber = GetNullableObjectAtIndex(list, 2);
  FLTIconAnchorBox *iconAnchor = iconAnchorAsNumber == nil ? nil : [[FLTIconAnchorBox alloc] initWithValue: [iconAnchorAsNumber integerValue]];
  pigeonResult.iconAnchor = iconAnchor;
  pigeonResult.iconImage = GetNullableObjectAtIndex(list, 3);
  pigeonResult.iconOffset = GetNullableObjectAtIndex(list, 4);
  pigeonResult.iconRotate = GetNullableObjectAtIndex(list, 5);
  pigeonResult.iconSize = GetNullableObjectAtIndex(list, 6);
  pigeonResult.symbolSortKey = GetNullableObjectAtIndex(list, 7);
  NSNumber *textAnchorAsNumber = GetNullableObjectAtIndex(list, 8);
  FLTTextAnchorBox *textAnchor = textAnchorAsNumber == nil ? nil : [[FLTTextAnchorBox alloc] initWithValue: [textAnchorAsNumber integerValue]];
  pigeonResult.textAnchor = textAnchor;
  pigeonResult.textField = GetNullableObjectAtIndex(list, 9);
  NSNumber *textJustifyAsNumber = GetNullableObjectAtIndex(list, 10);
  FLTTextJustifyBox *textJustify = textJustifyAsNumber == nil ? nil : [[FLTTextJustifyBox alloc] initWithValue: [textJustifyAsNumber integerValue]];
  pigeonResult.textJustify = textJustify;
  pigeonResult.textLetterSpacing = GetNullableObjectAtIndex(list, 11);
  pigeonResult.textMaxWidth = GetNullableObjectAtIndex(list, 12);
  pigeonResult.textOffset = GetNullableObjectAtIndex(list, 13);
  pigeonResult.textRadialOffset = GetNullableObjectAtIndex(list, 14);
  pigeonResult.textRotate = GetNullableObjectAtIndex(list, 15);
  pigeonResult.textSize = GetNullableObjectAtIndex(list, 16);
  NSNumber *textTransformAsNumber = GetNullableObjectAtIndex(list, 17);
  FLTTextTransformBox *textTransform = textTransformAsNumber == nil ? nil : [[FLTTextTransformBox alloc] initWithValue: [textTransformAsNumber integerValue]];
  pigeonResult.textTransform = textTransform;
  pigeonResult.iconColor = GetNullableObjectAtIndex(list, 18);
  pigeonResult.iconHaloBlur = GetNullableObjectAtIndex(list, 19);
  pigeonResult.iconHaloColor = GetNullableObjectAtIndex(list, 20);
  pigeonResult.iconHaloWidth = GetNullableObjectAtIndex(list, 21);
  pigeonResult.iconOpacity = GetNullableObjectAtIndex(list, 22);
  pigeonResult.textColor = GetNullableObjectAtIndex(list, 23);
  pigeonResult.textHaloBlur = GetNullableObjectAtIndex(list, 24);
  pigeonResult.textHaloColor = GetNullableObjectAtIndex(list, 25);
  pigeonResult.textHaloWidth = GetNullableObjectAtIndex(list, 26);
  pigeonResult.textOpacity = GetNullableObjectAtIndex(list, 27);
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 28);
  return pigeonResult;
}
+ (nullable FLTPointAnnotationOptions *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTPointAnnotationOptions fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.geometry ?: [NSNull null]),
    (self.image ?: [NSNull null]),
    (self.iconAnchor == nil ? [NSNull null] : [NSNumber numberWithInteger:self.iconAnchor.value]),
    (self.iconImage ?: [NSNull null]),
    (self.iconOffset ?: [NSNull null]),
    (self.iconRotate ?: [NSNull null]),
    (self.iconSize ?: [NSNull null]),
    (self.symbolSortKey ?: [NSNull null]),
    (self.textAnchor == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textAnchor.value]),
    (self.textField ?: [NSNull null]),
    (self.textJustify == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textJustify.value]),
    (self.textLetterSpacing ?: [NSNull null]),
    (self.textMaxWidth ?: [NSNull null]),
    (self.textOffset ?: [NSNull null]),
    (self.textRadialOffset ?: [NSNull null]),
    (self.textRotate ?: [NSNull null]),
    (self.textSize ?: [NSNull null]),
    (self.textTransform == nil ? [NSNull null] : [NSNumber numberWithInteger:self.textTransform.value]),
    (self.iconColor ?: [NSNull null]),
    (self.iconHaloBlur ?: [NSNull null]),
    (self.iconHaloColor ?: [NSNull null]),
    (self.iconHaloWidth ?: [NSNull null]),
    (self.iconOpacity ?: [NSNull null]),
    (self.textColor ?: [NSNull null]),
    (self.textHaloBlur ?: [NSNull null]),
    (self.textHaloColor ?: [NSNull null]),
    (self.textHaloWidth ?: [NSNull null]),
    (self.textOpacity ?: [NSNull null]),
    (self.userInfo ?: [NSNull null]),
  ];
}
@end

@interface FLTOnPointAnnotationClickListenerCodecReader : FlutterStandardReader
@end
@implementation FLTOnPointAnnotationClickListenerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTPointAnnotation fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTOnPointAnnotationClickListenerCodecWriter : FlutterStandardWriter
@end
@implementation FLTOnPointAnnotationClickListenerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTPointAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTOnPointAnnotationClickListenerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTOnPointAnnotationClickListenerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTOnPointAnnotationClickListenerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTOnPointAnnotationClickListenerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTOnPointAnnotationClickListenerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTOnPointAnnotationClickListenerCodecReaderWriter *readerWriter = [[FLTOnPointAnnotationClickListenerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FLTOnPointAnnotationClickListener ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTOnPointAnnotationClickListener

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onPointAnnotationClickAnnotation:(FLTPointAnnotation *)arg_annotation completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.mapbox_maps_flutter.OnPointAnnotationClickListener.onPointAnnotationClick"
      binaryMessenger:self.binaryMessenger
      codec:FLTOnPointAnnotationClickListenerGetCodec()];
  [channel sendMessage:@[arg_annotation ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

@interface FLT_PointAnnotationMessagerCodecReader : FlutterStandardReader
@end
@implementation FLT_PointAnnotationMessagerCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTPointAnnotation fromList:[self readValue]];
    case 129: 
      return [FLTPointAnnotationOptions fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLT_PointAnnotationMessagerCodecWriter : FlutterStandardWriter
@end
@implementation FLT_PointAnnotationMessagerCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTPointAnnotation class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FLTPointAnnotationOptions class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLT_PointAnnotationMessagerCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLT_PointAnnotationMessagerCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLT_PointAnnotationMessagerCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLT_PointAnnotationMessagerCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLT_PointAnnotationMessagerGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLT_PointAnnotationMessagerCodecReaderWriter *readerWriter = [[FLT_PointAnnotationMessagerCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLT_PointAnnotationMessagerSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLT_PointAnnotationMessager> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.create"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createManagerId:annotationOption:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(createManagerId:annotationOption:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotationOptions *arg_annotationOption = GetNullableObjectAtIndex(args, 1);
        [api createManagerId:arg_managerId annotationOption:arg_annotationOption completion:^(FLTPointAnnotation *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.createMulti"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createMultiManagerId:annotationOptions:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(createMultiManagerId:annotationOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<FLTPointAnnotationOptions *> *arg_annotationOptions = GetNullableObjectAtIndex(args, 1);
        [api createMultiManagerId:arg_managerId annotationOptions:arg_annotationOptions completion:^(NSArray<FLTPointAnnotation *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.update"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateManagerId:annotation:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(updateManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api updateManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.delete"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteManagerId:annotation:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(deleteManagerId:annotation:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTPointAnnotation *arg_annotation = GetNullableObjectAtIndex(args, 1);
        [api deleteManagerId:arg_managerId annotation:arg_annotation completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.deleteAll"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteAllManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(deleteAllManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api deleteAllManagerId:arg_managerId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconAllowOverlapManagerId:iconAllowOverlap:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconAllowOverlapManagerId:iconAllowOverlap:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconAllowOverlap = GetNullableObjectAtIndex(args, 1);
        [api setIconAllowOverlapManagerId:arg_managerId iconAllowOverlap:arg_iconAllowOverlap completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconAllowOverlapManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconAllowOverlapManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconAllowOverlapManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconIgnorePlacementManagerId:iconIgnorePlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconIgnorePlacementManagerId:iconIgnorePlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconIgnorePlacement = GetNullableObjectAtIndex(args, 1);
        [api setIconIgnorePlacementManagerId:arg_managerId iconIgnorePlacement:arg_iconIgnorePlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconIgnorePlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconIgnorePlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconIgnorePlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconKeepUprightManagerId:iconKeepUpright:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconKeepUprightManagerId:iconKeepUpright:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconKeepUpright = GetNullableObjectAtIndex(args, 1);
        [api setIconKeepUprightManagerId:arg_managerId iconKeepUpright:arg_iconKeepUpright completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconKeepUprightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconKeepUprightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconKeepUprightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconOptionalManagerId:iconOptional:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconOptionalManagerId:iconOptional:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconOptional = GetNullableObjectAtIndex(args, 1);
        [api setIconOptionalManagerId:arg_managerId iconOptional:arg_iconOptional completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconOptionalManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconOptionalManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconOptionalManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconPaddingManagerId:iconPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconPaddingManagerId:iconPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_iconPadding = GetNullableObjectAtIndex(args, 1);
        [api setIconPaddingManagerId:arg_managerId iconPadding:arg_iconPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconPaddingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconPitchAlignmentManagerId:iconPitchAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconPitchAlignmentManagerId:iconPitchAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconPitchAlignment arg_iconPitchAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconPitchAlignmentManagerId:arg_managerId iconPitchAlignment:arg_iconPitchAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconPitchAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconPitchAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconPitchAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconRotationAlignmentManagerId:iconRotationAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconRotationAlignmentManagerId:iconRotationAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconRotationAlignment arg_iconRotationAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconRotationAlignmentManagerId:arg_managerId iconRotationAlignment:arg_iconRotationAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconRotationAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconRotationAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconRotationAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconTextFit"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTextFitManagerId:iconTextFit:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTextFitManagerId:iconTextFit:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconTextFit arg_iconTextFit = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconTextFitManagerId:arg_managerId iconTextFit:arg_iconTextFit completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconTextFit"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTextFitManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTextFitManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTextFitManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconTextFitPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTextFitPaddingManagerId:iconTextFitPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTextFitPaddingManagerId:iconTextFitPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_iconTextFitPadding = GetNullableObjectAtIndex(args, 1);
        [api setIconTextFitPaddingManagerId:arg_managerId iconTextFitPadding:arg_iconTextFitPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconTextFitPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTextFitPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTextFitPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTextFitPaddingManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setSymbolAvoidEdges"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolAvoidEdgesManagerId:symbolAvoidEdges:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolAvoidEdgesManagerId:symbolAvoidEdges:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_symbolAvoidEdges = GetNullableObjectAtIndex(args, 1);
        [api setSymbolAvoidEdgesManagerId:arg_managerId symbolAvoidEdges:arg_symbolAvoidEdges completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getSymbolAvoidEdges"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolAvoidEdgesManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolAvoidEdgesManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolAvoidEdgesManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setSymbolPlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolPlacementManagerId:symbolPlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolPlacementManagerId:symbolPlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTSymbolPlacement arg_symbolPlacement = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setSymbolPlacementManagerId:arg_managerId symbolPlacement:arg_symbolPlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getSymbolPlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolPlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolPlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolPlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setSymbolSpacing"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolSpacingManagerId:symbolSpacing:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolSpacingManagerId:symbolSpacing:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_symbolSpacing = GetNullableObjectAtIndex(args, 1);
        [api setSymbolSpacingManagerId:arg_managerId symbolSpacing:arg_symbolSpacing completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getSymbolSpacing"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolSpacingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolSpacingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolSpacingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setSymbolZOrder"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSymbolZOrderManagerId:symbolZOrder:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setSymbolZOrderManagerId:symbolZOrder:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTSymbolZOrder arg_symbolZOrder = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setSymbolZOrderManagerId:arg_managerId symbolZOrder:arg_symbolZOrder completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getSymbolZOrder"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSymbolZOrderManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getSymbolZOrderManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getSymbolZOrderManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextAllowOverlapManagerId:textAllowOverlap:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextAllowOverlapManagerId:textAllowOverlap:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textAllowOverlap = GetNullableObjectAtIndex(args, 1);
        [api setTextAllowOverlapManagerId:arg_managerId textAllowOverlap:arg_textAllowOverlap completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextAllowOverlap"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextAllowOverlapManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextAllowOverlapManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextAllowOverlapManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextFont"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextFontManagerId:textFont:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextFontManagerId:textFont:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_textFont = GetNullableObjectAtIndex(args, 1);
        [api setTextFontManagerId:arg_managerId textFont:arg_textFont completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextFont"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextFontManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextFontManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextFontManagerId:arg_managerId completion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextIgnorePlacementManagerId:textIgnorePlacement:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextIgnorePlacementManagerId:textIgnorePlacement:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textIgnorePlacement = GetNullableObjectAtIndex(args, 1);
        [api setTextIgnorePlacementManagerId:arg_managerId textIgnorePlacement:arg_textIgnorePlacement completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextIgnorePlacement"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextIgnorePlacementManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextIgnorePlacementManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextIgnorePlacementManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextKeepUprightManagerId:textKeepUpright:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextKeepUprightManagerId:textKeepUpright:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textKeepUpright = GetNullableObjectAtIndex(args, 1);
        [api setTextKeepUprightManagerId:arg_managerId textKeepUpright:arg_textKeepUpright completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextKeepUpright"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextKeepUprightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextKeepUprightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextKeepUprightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextLineHeight"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextLineHeightManagerId:textLineHeight:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextLineHeightManagerId:textLineHeight:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textLineHeight = GetNullableObjectAtIndex(args, 1);
        [api setTextLineHeightManagerId:arg_managerId textLineHeight:arg_textLineHeight completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextLineHeight"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextLineHeightManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextLineHeightManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextLineHeightManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextMaxAngle"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextMaxAngleManagerId:textMaxAngle:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextMaxAngleManagerId:textMaxAngle:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textMaxAngle = GetNullableObjectAtIndex(args, 1);
        [api setTextMaxAngleManagerId:arg_managerId textMaxAngle:arg_textMaxAngle completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextMaxAngle"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextMaxAngleManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextMaxAngleManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextMaxAngleManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextOptionalManagerId:textOptional:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextOptionalManagerId:textOptional:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textOptional = GetNullableObjectAtIndex(args, 1);
        [api setTextOptionalManagerId:arg_managerId textOptional:arg_textOptional completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextOptional"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextOptionalManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextOptionalManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextOptionalManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextPaddingManagerId:textPadding:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextPaddingManagerId:textPadding:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_textPadding = GetNullableObjectAtIndex(args, 1);
        [api setTextPaddingManagerId:arg_managerId textPadding:arg_textPadding completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextPadding"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextPaddingManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextPaddingManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextPaddingManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextPitchAlignmentManagerId:textPitchAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextPitchAlignmentManagerId:textPitchAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextPitchAlignment arg_textPitchAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextPitchAlignmentManagerId:arg_managerId textPitchAlignment:arg_textPitchAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextPitchAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextPitchAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextPitchAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextPitchAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextRotationAlignmentManagerId:textRotationAlignment:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextRotationAlignmentManagerId:textRotationAlignment:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextRotationAlignment arg_textRotationAlignment = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextRotationAlignmentManagerId:arg_managerId textRotationAlignment:arg_textRotationAlignment completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextRotationAlignment"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextRotationAlignmentManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextRotationAlignmentManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextRotationAlignmentManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTranslateManagerId:iconTranslate:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTranslateManagerId:iconTranslate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_iconTranslate = GetNullableObjectAtIndex(args, 1);
        [api setIconTranslateManagerId:arg_managerId iconTranslate:arg_iconTranslate completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTranslateManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTranslateManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTranslateManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setIconTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setIconTranslateAnchorManagerId:iconTranslateAnchor:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setIconTranslateAnchorManagerId:iconTranslateAnchor:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTIconTranslateAnchor arg_iconTranslateAnchor = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setIconTranslateAnchorManagerId:arg_managerId iconTranslateAnchor:arg_iconTranslateAnchor completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getIconTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getIconTranslateAnchorManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getIconTranslateAnchorManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getIconTranslateAnchorManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextTranslateManagerId:textTranslate:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextTranslateManagerId:textTranslate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        NSArray<NSNumber *> *arg_textTranslate = GetNullableObjectAtIndex(args, 1);
        [api setTextTranslateManagerId:arg_managerId textTranslate:arg_textTranslate completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextTranslate"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextTranslateManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextTranslateManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextTranslateManagerId:arg_managerId completion:^(NSArray<NSNumber *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.setTextTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setTextTranslateAnchorManagerId:textTranslateAnchor:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(setTextTranslateAnchorManagerId:textTranslateAnchor:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        FLTTextTranslateAnchor arg_textTranslateAnchor = [GetNullableObjectAtIndex(args, 1) integerValue];
        [api setTextTranslateAnchorManagerId:arg_managerId textTranslateAnchor:arg_textTranslateAnchor completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.mapbox_maps_flutter._PointAnnotationMessager.getTextTranslateAnchor"
        binaryMessenger:binaryMessenger
        codec:FLT_PointAnnotationMessagerGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTextTranslateAnchorManagerId:completion:)], @"FLT_PointAnnotationMessager api (%@) doesn't respond to @selector(getTextTranslateAnchorManagerId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_managerId = GetNullableObjectAtIndex(args, 0);
        [api getTextTranslateAnchorManagerId:arg_managerId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
